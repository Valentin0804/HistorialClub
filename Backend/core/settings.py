"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import environ
import dj_database_url

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Inicializa django-environ
env = environ.Env()

# Lee el archivo .env
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

DATABASE_URL = config('DATABASE_URL', default='')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Lee ALLOWED_HOSTS desde una variable de entorno, limpia los espacios y la convierte en una lista.
ALLOWED_HOSTS = [host.strip() for host in config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')]

# Lee CSRF_TRUSTED_ORIGINS desde una variable de entorno, también como una lista.
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in config('CSRF_TRUSTED_ORIGINS', default='').split(',') if origin.strip()]

# Asegúrate de que DEBUG esté configurado para producción
DEBUG = config('DEBUG', default=False, cast=bool)
#DEBUG = True
# Asegúrate de que SECRET_KEY también se lee desde las variables de entorno
SECRET_KEY = config('SECRET_KEY')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'historial',        
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'historial/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

LOCAL_MYSQL = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'club_chabas_db',    # Nombre de tu BD
        'USER': 'root',  # Ej: 'root'
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306',
    }

DATABASES = {}

if DATABASE_URL:
    # Si DATABASE_URL tiene un valor (está en producción), úsala.
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)
else:
    # Si no (estás en local), usa la configuración de MySQL.
    DATABASES['default'] = LOCAL_MYSQL
    print ('Usando DB local')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-ar'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React usa este puerto
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# settings.py

# ... tus otras configuraciones como ALLOWED_HOSTS, etc. ...

# ==========================================================
# CONFIGURACIÓN DE SEGURIDAD PARA PRODUCCIÓN (RAILWAY)
# ==========================================================

# 2. Configuración de Cookies Seguras
#    Asegura que las cookies solo se envíen a través de una conexión HTTPS segura.
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# 3. Configuración para Proxies (Opcional pero muy recomendado)
#    Ayuda a Django a identificar correctamente que la conexión es segura (https)
#    cuando está detrás del proxy de Railway.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ==========================================================